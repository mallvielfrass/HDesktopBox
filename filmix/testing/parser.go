package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

type Auto struct {
	AutoGenerated AutoGenerated `json:""`
}
type AutoGenerated struct {
	Seasons []Seasons `json:"seasons"`
	Name    string    `json:"name"`
}
type Files struct {
	Quality int    `json:"quality"`
	ProPlus bool   `json:"proPlus"`
	URL     string `json:"url"`
}
type E1 struct {
	Episode  int     `json:"episode"`
	AdSkip   int     `json:"ad_skip"`
	Title    string  `json:"title"`
	Released string  `json:"released"`
	Files    []Files `json:"files"`
}
type Seasons struct {
	Season   int        `json:"season"`
	Episodes []Episodes `json:"episodes,omitempty"`
}
type Episodes struct {
	E0  interface{} `json:"e0"`
	E1  interface{} `json:"e1"`
	E2  interface{} `json:"e2"`
	E3  interface{} `json:"e3"`
	E4  interface{} `json:"e4"`
	E5  interface{} `json:"e5"`
	E6  interface{} `json:"e6"`
	E7  interface{} `json:"e7"`
	E8  interface{} `json:"e8"`
	E9  interface{} `json:"e9"`
	E10 interface{} `json:"e10"`
	E11 interface{} `json:"e11"`
}
type Serie struct {
	Episode  int         `json:"episode"`
	AdSkip   int         `json:"ad_skip"`
	Title    interface{} `json:"title"`
	Released interface{} `json:"released"`
	Files    []Files     `json:"files"`
}

func main() {
	dat, err := ioutil.ReadFile("dat2.json")
	check(err)
	//fmt.Print(string(dat))
	var raw []AutoGenerated
	if err := json.Unmarshal(dat, &raw); err != nil {
		panic(err)
	}
	l := len(raw)
	for i := 0; i < l; i++ {
		fmt.Printf("%s | seasons: %d\n", raw[i].Name, len(raw[i].Seasons))
		for a := 0; a < len(raw[i].Seasons); a++ {
			fmt.Printf("Seasons: %d| ", a)
			fmt.Printf("Series: | \n", raw[i].Seasons[a])
		}
	}
}
